% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_tools.R
\name{apply_to_files}
\alias{apply_to_files}
\title{Apply a function to every file in a folder that matches a regex pattern}
\usage{
apply_to_files(
  path,
  pattern,
  func,
  ...,
  recursive = FALSE,
  ignorecase = TRUE,
  method = "full_join"
)
}
\arguments{
\item{path}{(Character) The path to the folder.}

\item{pattern}{(Character) A regular expression search pattern.}

\item{func}{(Name) The bare name of a function to execute on each file.}

\item{...}{(...) Optional arguments that will be passed to \code{func}.}

\item{recursive}{(Logical) If \code{TRUE}, also search inside the subfolders of \code{path}.}

\item{ignorecase}{(Logical) If \code{TRUE}, \code{pattern} is case-insensitive.}

\item{method}{(Character) The method to use to merge all of the files into one
dataframe. \code{"full_join"} (the default) returns all columns and rows. \code{"left_join"}
returns all rows from the first file, and all columns from subsequent files.
\code{"inner_join"} returns rows from the first file that have matches in subsequent files.
\code{"row_bind"} simply appends each file to the last row of the dataframe, and leaves
\code{NA}s when the files contain different columns.}
}
\value{
Invisibly returns a single dataframe with all of the input files merged
together. If \verb{method = "row_bind",} then a new column, \code{orig_source_file}, contains
the source file's name. The "join" methods do not have this column because the values
are mixed together.
}
\description{
Create a list of files that match a regex search pattern, and then apply a function to
each file. For example, run \code{read_csv} on every .csv file in a folder.
}
\section{Authors}{

\itemize{
\item Desi Quintans (\url{http://www.desiquintans.com})
\item Gregor (\url{https://stackoverflow.com/users/903061/gregor})
}
}

\section{Source}{

\url{http://stackoverflow.com/a/24376207}
}

\examples{

# rain <- apply_to_files(path = "Raw data/Rainfall", pattern = "csv",
#                        func = readr::read_csv, col_types = "Tiic",
#                        recursive = FALSE, ignorecase = TRUE,
#                        method = "row_bind")

# dplyr::sample_n(rain, 5)

#> # A tibble: 5 x 5
#>
#>   orig_source_file       Time                 Tips    mV Event
#>   <chr>                  <dttm>              <int> <int> <chr>
#> 1 BOW-BM-2016-01-15.csv  2015-12-17 03:58:00     0  4047 Normal
#> 2 BOW-BM-2016-01-15.csv  2016-01-03 00:27:00     2  3962 Normal
#> 3 BOW-BM-2016-01-15.csv  2015-11-27 12:06:00     0  4262 Normal
#> 4 BIL-BPA-2018-01-24.csv 2015-11-15 10:00:00     0  4378 Normal
#> 5 BOW-BM-2016-08-05.csv  2016-04-13 19:00:00     0  4447 Normal

}
